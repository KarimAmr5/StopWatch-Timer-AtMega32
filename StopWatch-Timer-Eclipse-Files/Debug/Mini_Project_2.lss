
Mini_Project_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000004e0  00000574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006a  0080006a  0000057e  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007e8  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_1>
   8:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__vector_2>
   c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  8a:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER1_Init>:
/**************************************************************************************************/


/******************* Timer1 Initialization *******************/
void TIMER1_Init(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
  9a:	ef e4       	ldi	r30, 0x4F	; 79
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	8c e0       	ldi	r24, 0x0C	; 12
  a0:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10) ;
  a2:	ee e4       	ldi	r30, 0x4E	; 78
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	8d e0       	ldi	r24, 0x0D	; 13
  a8:	80 83       	st	Z, r24
	SET_BIT(TIMSK,OCIE1A); /* Enable Timer1 INT */
  aa:	a9 e5       	ldi	r26, 0x59	; 89
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	e9 e5       	ldi	r30, 0x59	; 89
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 61       	ori	r24, 0x10	; 16
  b6:	8c 93       	st	X, r24
	TCNT1 = 0; /* Initialize counter with ZERO */
  b8:	ec e4       	ldi	r30, 0x4C	; 76
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	11 82       	std	Z+1, r1	; 0x01
  be:	10 82       	st	Z, r1
	OCR1A = 977 ; /* Required TOP value to Make an interrupt after 1 Second */
  c0:	ea e4       	ldi	r30, 0x4A	; 74
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	81 ed       	ldi	r24, 0xD1	; 209
  c6:	93 e0       	ldi	r25, 0x03	; 3
  c8:	91 83       	std	Z+1, r25	; 0x01
  ca:	80 83       	st	Z, r24
}
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	08 95       	ret

000000d2 <INT0_Init>:

/*************************************************************/

/******************* INT0 Initialization *******************/
void INT0_Init(void) // Stop-Watch RESET */
{
  d2:	df 93       	push	r29
  d4:	cf 93       	push	r28
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT_INPUT(DDRD,PD2);  /* Set as input */
  da:	a1 e3       	ldi	r26, 0x31	; 49
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	e1 e3       	ldi	r30, 0x31	; 49
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8b 7f       	andi	r24, 0xFB	; 251
  e6:	8c 93       	st	X, r24
	SET_BIT_OUTPUT(PORTD,PD2); /* internal Pull-up */
  e8:	a2 e3       	ldi	r26, 0x32	; 50
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e2 e3       	ldi	r30, 0x32	; 50
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	8c 93       	st	X, r24
	SET_BIT(GICR,INT0); /* INT0 enable */
  f6:	ab e5       	ldi	r26, 0x5B	; 91
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	eb e5       	ldi	r30, 0x5B	; 91
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 64       	ori	r24, 0x40	; 64
 102:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC01) ; /* Falling edge configuration */
 104:	a5 e5       	ldi	r26, 0x55	; 85
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e5 e5       	ldi	r30, 0x55	; 85
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	8c 93       	st	X, r24
}
 112:	cf 91       	pop	r28
 114:	df 91       	pop	r29
 116:	08 95       	ret

00000118 <INT1_Init>:

/*************************************************************/

/******************* INT1 Initialization *******************/
void INT1_Init(void) /* Stop-Watch PAUSE */
{
 118:	df 93       	push	r29
 11a:	cf 93       	push	r28
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT_INPUT(DDRD,PD3); /* Set as input */
 120:	a1 e3       	ldi	r26, 0x31	; 49
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e1 e3       	ldi	r30, 0x31	; 49
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	87 7f       	andi	r24, 0xF7	; 247
 12c:	8c 93       	st	X, r24
	SET_BIT(GICR,INT1); /* INT1 enable */
 12e:	ab e5       	ldi	r26, 0x5B	; 91
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	eb e5       	ldi	r30, 0x5B	; 91
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC11) | (1<<ISC10) ; /* Raising Edge configuration */
 13c:	a5 e5       	ldi	r26, 0x55	; 85
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e5 e5       	ldi	r30, 0x55	; 85
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	8c 60       	ori	r24, 0x0C	; 12
 148:	8c 93       	st	X, r24
}
 14a:	cf 91       	pop	r28
 14c:	df 91       	pop	r29
 14e:	08 95       	ret

00000150 <INT2_Init>:

/*************************************************************/

/******************* INT2 Initialization *******************/
void INT2_Init(void) /* Stop-Watch RESUME */
{
 150:	df 93       	push	r29
 152:	cf 93       	push	r28
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
	SET_BIT_INPUT(DDRB,PB2); /* Set as input */
 158:	a7 e3       	ldi	r26, 0x37	; 55
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	e7 e3       	ldi	r30, 0x37	; 55
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	8b 7f       	andi	r24, 0xFB	; 251
 164:	8c 93       	st	X, r24
	SET_BIT_OUTPUT(PORTB,PB2); /* internal Pull-up configuration */
 166:	a8 e3       	ldi	r26, 0x38	; 56
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e8 e3       	ldi	r30, 0x38	; 56
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	84 60       	ori	r24, 0x04	; 4
 172:	8c 93       	st	X, r24
	SET_BIT(GICR,INT2); /* INT2 enable */
 174:	ab e5       	ldi	r26, 0x5B	; 91
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	eb e5       	ldi	r30, 0x5B	; 91
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 62       	ori	r24, 0x20	; 32
 180:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCSR,ISC2) ; /* Falling Edge configuration */
 182:	a4 e5       	ldi	r26, 0x54	; 84
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	e4 e5       	ldi	r30, 0x54	; 84
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	8f 7b       	andi	r24, 0xBF	; 191
 18e:	8c 93       	st	X, r24
}
 190:	cf 91       	pop	r28
 192:	df 91       	pop	r29
 194:	08 95       	ret

00000196 <main>:
/*Set to global variable to be accessed by req. functions*/
/*****************************************************************/


int main()
{
 196:	df 93       	push	r29
 198:	cf 93       	push	r28
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	66 97       	sbiw	r28, 0x16	; 22
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
	DDRA |= 0x3F; /* setting first 6 pins in PORTA as output pins to control each 7 segment */
 1aa:	aa e3       	ldi	r26, 0x3A	; 58
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	ea e3       	ldi	r30, 0x3A	; 58
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	8f 63       	ori	r24, 0x3F	; 63
 1b6:	8c 93       	st	X, r24
	/* set SEGMENT_NUMBERS as a variable for number of required digits */
	DDRC |= 0x0F; /* Setting first 4 pins of PORTC as output pins for 7 segment value */
 1b8:	a4 e3       	ldi	r26, 0x34	; 52
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	e4 e3       	ldi	r30, 0x34	; 52
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	8f 60       	ori	r24, 0x0F	; 15
 1c4:	8c 93       	st	X, r24
	SREG |= (1<<7); /* Enables Global Interrupt */
 1c6:	af e5       	ldi	r26, 0x5F	; 95
 1c8:	b0 e0       	ldi	r27, 0x00	; 0
 1ca:	ef e5       	ldi	r30, 0x5F	; 95
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	8c 93       	st	X, r24

	INT0_Init();
 1d4:	0e 94 69 00 	call	0xd2	; 0xd2 <INT0_Init>
	INT1_Init();
 1d8:	0e 94 8c 00 	call	0x118	; 0x118 <INT1_Init>
	INT2_Init();
 1dc:	0e 94 a8 00 	call	0x150	; 0x150 <INT2_Init>
	TIMER1_Init();
 1e0:	0e 94 49 00 	call	0x92	; 0x92 <TIMER1_Init>

	unsigned char DigitDecode[10] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};
 1e4:	ce 01       	movw	r24, r28
 1e6:	02 96       	adiw	r24, 0x02	; 2
 1e8:	9b 8b       	std	Y+19, r25	; 0x13
 1ea:	8a 8b       	std	Y+18, r24	; 0x12
 1ec:	e0 e6       	ldi	r30, 0x60	; 96
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	fd 8b       	std	Y+21, r31	; 0x15
 1f2:	ec 8b       	std	Y+20, r30	; 0x14
 1f4:	fa e0       	ldi	r31, 0x0A	; 10
 1f6:	fe 8b       	std	Y+22, r31	; 0x16
 1f8:	ec 89       	ldd	r30, Y+20	; 0x14
 1fa:	fd 89       	ldd	r31, Y+21	; 0x15
 1fc:	00 80       	ld	r0, Z
 1fe:	8c 89       	ldd	r24, Y+20	; 0x14
 200:	9d 89       	ldd	r25, Y+21	; 0x15
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	9d 8b       	std	Y+21, r25	; 0x15
 206:	8c 8b       	std	Y+20, r24	; 0x14
 208:	ea 89       	ldd	r30, Y+18	; 0x12
 20a:	fb 89       	ldd	r31, Y+19	; 0x13
 20c:	00 82       	st	Z, r0
 20e:	8a 89       	ldd	r24, Y+18	; 0x12
 210:	9b 89       	ldd	r25, Y+19	; 0x13
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	9b 8b       	std	Y+19, r25	; 0x13
 216:	8a 8b       	std	Y+18, r24	; 0x12
 218:	9e 89       	ldd	r25, Y+22	; 0x16
 21a:	91 50       	subi	r25, 0x01	; 1
 21c:	9e 8b       	std	Y+22, r25	; 0x16
 21e:	ee 89       	ldd	r30, Y+22	; 0x16
 220:	ee 23       	and	r30, r30
 222:	51 f7       	brne	.-44     	; 0x1f8 <main+0x62>
	/*The Previous array holds the required digit value in HEX to be sent to the decoder
	   to display the required digit on stop-watch while preserving the last four pins in
	   PORTC without altering them  */

	unsigned char SegmentsLooping=0; /*Variable that will loop around the digits */
 224:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		/*An Array that holds the value of each sector of stop watch into digits */
		unsigned char StopWatch[SEGMENT_NUMBERS] = {(Seconds%10),(Seconds/10),\
 226:	80 91 6d 00 	lds	r24, 0x006D
 22a:	9a e0       	ldi	r25, 0x0A	; 10
 22c:	69 2f       	mov	r22, r25
 22e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__udivmodqi4>
 232:	89 2f       	mov	r24, r25
 234:	28 2f       	mov	r18, r24
 236:	80 91 6d 00 	lds	r24, 0x006D
 23a:	9a e0       	ldi	r25, 0x0A	; 10
 23c:	69 2f       	mov	r22, r25
 23e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__udivmodqi4>
 242:	38 2f       	mov	r19, r24
 244:	80 91 6e 00 	lds	r24, 0x006E
 248:	9a e0       	ldi	r25, 0x0A	; 10
 24a:	69 2f       	mov	r22, r25
 24c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__udivmodqi4>
 250:	89 2f       	mov	r24, r25
 252:	48 2f       	mov	r20, r24
 254:	80 91 6e 00 	lds	r24, 0x006E
 258:	9a e0       	ldi	r25, 0x0A	; 10
 25a:	69 2f       	mov	r22, r25
 25c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__udivmodqi4>
 260:	58 2f       	mov	r21, r24
 262:	80 91 6f 00 	lds	r24, 0x006F
 266:	9a e0       	ldi	r25, 0x0A	; 10
 268:	69 2f       	mov	r22, r25
 26a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__udivmodqi4>
 26e:	89 2f       	mov	r24, r25
 270:	e8 2f       	mov	r30, r24
 272:	80 91 6f 00 	lds	r24, 0x006F
 276:	9a e0       	ldi	r25, 0x0A	; 10
 278:	69 2f       	mov	r22, r25
 27a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__udivmodqi4>
 27e:	2c 87       	std	Y+12, r18	; 0x0c
 280:	3d 87       	std	Y+13, r19	; 0x0d
 282:	4e 87       	std	Y+14, r20	; 0x0e
 284:	5f 87       	std	Y+15, r21	; 0x0f
 286:	e8 8b       	std	Y+16, r30	; 0x10
 288:	89 8b       	std	Y+17, r24	; 0x11
													(Minutes%10),(Minutes/10),\
													(Hours%10),(Hours/10)};

		if(SegmentsLooping==SEGMENT_NUMBERS)
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	86 30       	cpi	r24, 0x06	; 6
 28e:	09 f4       	brne	.+2      	; 0x292 <main+0xfc>
			SegmentsLooping=0;
 290:	19 82       	std	Y+1, r1	; 0x01

		/*Looping on the 6 Segments to show and display the current value simultaneously */

		PORTA &= 0xC0; /* Disable all 7 segments */
 292:	ab e3       	ldi	r26, 0x3B	; 59
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	eb e3       	ldi	r30, 0x3B	; 59
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	80 7c       	andi	r24, 0xC0	; 192
 29e:	8c 93       	st	X, r24
		PORTC &= 0xF0; /* Clear the output pins and set them to ZERO */
 2a0:	a5 e3       	ldi	r26, 0x35	; 53
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	e5 e3       	ldi	r30, 0x35	; 53
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	80 7f       	andi	r24, 0xF0	; 240
 2ac:	8c 93       	st	X, r24

		PORTC |= DigitDecode[StopWatch[SegmentsLooping]];
 2ae:	a5 e3       	ldi	r26, 0x35	; 53
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	e5 e3       	ldi	r30, 0x35	; 53
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	40 81       	ld	r20, Z
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	28 2f       	mov	r18, r24
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	ce 01       	movw	r24, r28
 2c0:	0c 96       	adiw	r24, 0x0c	; 12
 2c2:	fc 01       	movw	r30, r24
 2c4:	e2 0f       	add	r30, r18
 2c6:	f3 1f       	adc	r31, r19
 2c8:	80 81       	ld	r24, Z
 2ca:	28 2f       	mov	r18, r24
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	ce 01       	movw	r24, r28
 2d0:	02 96       	adiw	r24, 0x02	; 2
 2d2:	fc 01       	movw	r30, r24
 2d4:	e2 0f       	add	r30, r18
 2d6:	f3 1f       	adc	r31, r19
 2d8:	80 81       	ld	r24, Z
 2da:	84 2b       	or	r24, r20
 2dc:	8c 93       	st	X, r24
		/*Sends required value of the current digit to the decoder*/

		SET_BIT(PORTA,SegmentsLooping); /* Enable the required 7-segment */
 2de:	ab e3       	ldi	r26, 0x3B	; 59
 2e0:	b0 e0       	ldi	r27, 0x00	; 0
 2e2:	eb e3       	ldi	r30, 0x3B	; 59
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	48 2f       	mov	r20, r24
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	28 2f       	mov	r18, r24
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 2e       	mov	r0, r18
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <main+0x166>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	0a 94       	dec	r0
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <main+0x162>
 300:	84 2b       	or	r24, r20
 302:	8c 93       	st	X, r24

		SegmentsLooping++; /*Increment the variable to loop on the next 7-segment*/
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	89 83       	std	Y+1, r24	; 0x01



		if(1==Interrupt_Flag) /*If interrupt flag is raised , counter code will execute*/
 30a:	80 91 6a 00 	lds	r24, 0x006A
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	09 f0       	breq	.+2      	; 0x314 <main+0x17e>
 312:	89 cf       	rjmp	.-238    	; 0x226 <main+0x90>
		{
			/*********Digits Value Counter********/

			if(59==Seconds)
 314:	80 91 6d 00 	lds	r24, 0x006D
 318:	8b 33       	cpi	r24, 0x3B	; 59
 31a:	e1 f4       	brne	.+56     	; 0x354 <main+0x1be>
			{
				Seconds=0;
 31c:	10 92 6d 00 	sts	0x006D, r1
				if(59==Minutes && 3600==Tick)
 320:	80 91 6e 00 	lds	r24, 0x006E
 324:	8b 33       	cpi	r24, 0x3B	; 59
 326:	81 f4       	brne	.+32     	; 0x348 <main+0x1b2>
 328:	80 91 6b 00 	lds	r24, 0x006B
 32c:	90 91 6c 00 	lds	r25, 0x006C
 330:	fe e0       	ldi	r31, 0x0E	; 14
 332:	80 31       	cpi	r24, 0x10	; 16
 334:	9f 07       	cpc	r25, r31
 336:	41 f4       	brne	.+16     	; 0x348 <main+0x1b2>
				/*Checks if the minutes digits had completed 1 Hour (3600 seconds = 60Minutes*60Seconds) */
				{
					Minutes=0;
 338:	10 92 6e 00 	sts	0x006E, r1
						Hours=0;
						Minutes=0;
						Seconds=0;
					}
					else
					Hours++;
 33c:	80 91 6f 00 	lds	r24, 0x006F
 340:	8f 5f       	subi	r24, 0xFF	; 255
 342:	80 93 6f 00 	sts	0x006F, r24
 346:	0b c0       	rjmp	.+22     	; 0x35e <main+0x1c8>
				}
				else
				Minutes++;
 348:	80 91 6e 00 	lds	r24, 0x006E
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	80 93 6e 00 	sts	0x006E, r24
 352:	05 c0       	rjmp	.+10     	; 0x35e <main+0x1c8>
			}
			else
			Seconds++;
 354:	80 91 6d 00 	lds	r24, 0x006D
 358:	8f 5f       	subi	r24, 0xFF	; 255
 35a:	80 93 6d 00 	sts	0x006D, r24

			/**************************************/

			Interrupt_Flag=0; /*Set the flag variable back to ZERO -> OFF*/
 35e:	10 92 6a 00 	sts	0x006A, r1
 362:	61 cf       	rjmp	.-318    	; 0x226 <main+0x90>

00000364 <__vector_1>:
	}
}

/*****************INT0 Interrupt Execution****************/
ISR(INT0_vect)
{
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	8f 93       	push	r24
 370:	af 93       	push	r26
 372:	bf 93       	push	r27
 374:	ef 93       	push	r30
 376:	ff 93       	push	r31
 378:	df 93       	push	r29
 37a:	cf 93       	push	r28
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
  //Timer Reset

	/*Turns Off Timer1 Source */
	CLEAR_BIT(TCCR1B,CS10);
 380:	ae e4       	ldi	r26, 0x4E	; 78
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	ee e4       	ldi	r30, 0x4E	; 78
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	8e 7f       	andi	r24, 0xFE	; 254
 38c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS12);
 38e:	ae e4       	ldi	r26, 0x4E	; 78
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	ee e4       	ldi	r30, 0x4E	; 78
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	8b 7f       	andi	r24, 0xFB	; 251
 39a:	8c 93       	st	X, r24

	Tick = 0 ; /* Set Counter back to ZERO */
 39c:	10 92 6c 00 	sts	0x006C, r1
 3a0:	10 92 6b 00 	sts	0x006B, r1

	 /* Reset the stop-watch digits back to ZERO */
	Seconds = 0;
 3a4:	10 92 6d 00 	sts	0x006D, r1
	Minutes = 0;
 3a8:	10 92 6e 00 	sts	0x006E, r1
	Hours = 0;
 3ac:	10 92 6f 00 	sts	0x006F, r1


	/*Turns ON Timer1 Source */
	SET_BIT(TCCR1B,CS10);
 3b0:	ae e4       	ldi	r26, 0x4E	; 78
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	ee e4       	ldi	r30, 0x4E	; 78
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	81 60       	ori	r24, 0x01	; 1
 3bc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS12);
 3be:	ae e4       	ldi	r26, 0x4E	; 78
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
 3c2:	ee e4       	ldi	r30, 0x4E	; 78
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	84 60       	ori	r24, 0x04	; 4
 3ca:	8c 93       	st	X, r24

}
 3cc:	cf 91       	pop	r28
 3ce:	df 91       	pop	r29
 3d0:	ff 91       	pop	r31
 3d2:	ef 91       	pop	r30
 3d4:	bf 91       	pop	r27
 3d6:	af 91       	pop	r26
 3d8:	8f 91       	pop	r24
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <__vector_2>:
/*********************************************************/

/*****************INT1 Interrupt Execution****************/
ISR(INT1_vect)
{
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	8f 93       	push	r24
 3f0:	af 93       	push	r26
 3f2:	bf 93       	push	r27
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
 3f8:	df 93       	push	r29
 3fa:	cf 93       	push	r28
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
    /* Timer PAUSE */
	/* Turns Off Timer1 Source */
	CLEAR_BIT(TCCR1B,CS10);
 400:	ae e4       	ldi	r26, 0x4E	; 78
 402:	b0 e0       	ldi	r27, 0x00	; 0
 404:	ee e4       	ldi	r30, 0x4E	; 78
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	8e 7f       	andi	r24, 0xFE	; 254
 40c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS12);
 40e:	ae e4       	ldi	r26, 0x4E	; 78
 410:	b0 e0       	ldi	r27, 0x00	; 0
 412:	ee e4       	ldi	r30, 0x4E	; 78
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	8b 7f       	andi	r24, 0xFB	; 251
 41a:	8c 93       	st	X, r24
}
 41c:	cf 91       	pop	r28
 41e:	df 91       	pop	r29
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	bf 91       	pop	r27
 426:	af 91       	pop	r26
 428:	8f 91       	pop	r24
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <__vector_3>:
/*********************************************************/

/*****************INT2 Interrupt Execution****************/
ISR(INT2_vect)
{
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	8f 93       	push	r24
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
 448:	df 93       	push	r29
 44a:	cf 93       	push	r28
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
    /* Timer RESUME */
	/*Turns ON Timer1 Source */
	SET_BIT(TCCR1B,CS10);
 450:	ae e4       	ldi	r26, 0x4E	; 78
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	ee e4       	ldi	r30, 0x4E	; 78
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	81 60       	ori	r24, 0x01	; 1
 45c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS12);
 45e:	ae e4       	ldi	r26, 0x4E	; 78
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	ee e4       	ldi	r30, 0x4E	; 78
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	84 60       	ori	r24, 0x04	; 4
 46a:	8c 93       	st	X, r24
}
 46c:	cf 91       	pop	r28
 46e:	df 91       	pop	r29
 470:	ff 91       	pop	r31
 472:	ef 91       	pop	r30
 474:	bf 91       	pop	r27
 476:	af 91       	pop	r26
 478:	8f 91       	pop	r24
 47a:	0f 90       	pop	r0
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	0f 90       	pop	r0
 480:	1f 90       	pop	r1
 482:	18 95       	reti

00000484 <__vector_7>:
/********************************************************/


ISR(TIMER1_COMPA_vect)
{
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	8f 93       	push	r24
 490:	9f 93       	push	r25
 492:	df 93       	push	r29
 494:	cf 93       	push	r28
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
	Tick++; /*Increment Tick counter*/
 49a:	80 91 6b 00 	lds	r24, 0x006B
 49e:	90 91 6c 00 	lds	r25, 0x006C
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	90 93 6c 00 	sts	0x006C, r25
 4a8:	80 93 6b 00 	sts	0x006B, r24
	Interrupt_Flag = 1; /*Set Flag variable to one to exit the interrupt as quick as possible */
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	80 93 6a 00 	sts	0x006A, r24

}
 4b2:	cf 91       	pop	r28
 4b4:	df 91       	pop	r29
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <__udivmodqi4>:
 4c4:	99 1b       	sub	r25, r25
 4c6:	79 e0       	ldi	r23, 0x09	; 9
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__udivmodqi4_ep>

000004ca <__udivmodqi4_loop>:
 4ca:	99 1f       	adc	r25, r25
 4cc:	96 17       	cp	r25, r22
 4ce:	08 f0       	brcs	.+2      	; 0x4d2 <__udivmodqi4_ep>
 4d0:	96 1b       	sub	r25, r22

000004d2 <__udivmodqi4_ep>:
 4d2:	88 1f       	adc	r24, r24
 4d4:	7a 95       	dec	r23
 4d6:	c9 f7       	brne	.-14     	; 0x4ca <__udivmodqi4_loop>
 4d8:	80 95       	com	r24
 4da:	08 95       	ret

000004dc <_exit>:
 4dc:	f8 94       	cli

000004de <__stop_program>:
 4de:	ff cf       	rjmp	.-2      	; 0x4de <__stop_program>
